{"paragraphs":[{"text":"sc.version","user":"anonymous","dateUpdated":"2020-02-09T17:30:39+0100","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1581264359998_-99078004","id":"20200203-211355_274881870","dateCreated":"2020-02-09T17:05:59+0100","dateStarted":"2020-02-09T17:30:39+0100","dateFinished":"2020-02-09T17:30:39+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4134"},{"text":"util.Properties.versionString","user":"anonymous","dateUpdated":"2020-02-09T17:30:39+0100","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1581264359999_526346628","id":"20200203-211354_1056434213","dateCreated":"2020-02-09T17:05:59+0100","dateStarted":"2020-02-09T17:30:39+0100","dateFinished":"2020-02-09T17:30:39+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4135"},{"text":"import org.apache.spark.sql.SparkSession\nimport org.apache.spark.sql.types.{IntegerType, StringType, StructType}\nimport org.apache.spark.sql.SQLContext\n\nval spark: SparkSession = SparkSession.builder().master(\"local\").appName(\"Proyecto-SparkScala\")\n    .getOrCreate()","user":"anonymous","dateUpdated":"2020-02-09T17:30:39+0100","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1581264360000_754702649","id":"20200202-194529_52640767","dateCreated":"2020-02-09T17:06:00+0100","dateStarted":"2020-02-09T17:30:39+0100","dateFinished":"2020-02-09T17:30:40+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4136"},{"text":"val schema = new StructType().add(\"id\",IntegerType,true)\n    .add(\"Nombre\",StringType,true)\n    .add(\"Edad\",IntegerType,true)\n    .add(\"Rating\",IntegerType,true)\n\nval table = spark.read.format(\"csv\").schema(schema).option(\"delimiter\",\",\").load(\"/home/inot/amigos.csv\").createOrReplaceTempView(\"amigos\")\n\nspark.sql(\"select count(*) as registros from amigos\").show()\n\nspark.stop()","user":"anonymous","dateUpdated":"2020-02-09T17:30:40+0100","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1581264360000_242063018","id":"20200203-205449_1521231270","dateCreated":"2020-02-09T17:06:00+0100","dateStarted":"2020-02-09T17:30:40+0100","dateFinished":"2020-02-09T17:30:40+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4137"},{"text":"import java.util.Properties\nimport scala.io.Source\nimport org.apache.kafka.clients.producer.{KafkaProducer, ProducerRecord}\nimport org.apache.spark.sql.SparkSession\nimport org.apache.spark.sql.types.{IntegerType, StringType, StructType}\nimport org.apache.spark.sql.functions.{from_json, col}\n\nval spark: SparkSession = SparkSession.builder().master(\"local[2]\").appName(\"Proyecto-SparkScala\")\n    .getOrCreate()","user":"anonymous","dateUpdated":"2020-02-09T17:30:40+0100","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1581264360001_382919398","id":"20200204-210140_1708416617","dateCreated":"2020-02-09T17:06:00+0100","dateStarted":"2020-02-09T17:30:40+0100","dateFinished":"2020-02-09T17:30:41+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4138"},{"text":"val props:Properties = new Properties()\nprops.put(\"bootstrap.servers\",\"localhost:9092\")\nprops.put(\"key.serializer\",\"org.apache.kafka.common.serialization.StringSerializer\")\nprops.put(\"value.serializer\",\"org.apache.kafka.common.serialization.StringSerializer\")\nprops.put(\"acks\",\"all\")\n\nval productor = new KafkaProducer[String,String](props)\n\nval topic=\"projectBigDataProcessing\"\nval json = Source.fromFile(\"/home/inot/personal.json\").getLines.mkString.replace(\"\\n\", \"\").replace(\" \", \"\").replace(\"},\", \"},\\n\").split(\"\\n\")\n// Formateo el string en base a la estructura del texto para que se envíen los registros de uno en uno, sin espacios raros, y que el consumer pueda reproducir y procesar el json correctamente.\nfor (person <- json) productor.send(new ProducerRecord[String,String](topic, person))\n    \nproductor.close()","user":"anonymous","dateUpdated":"2020-02-09T17:30:41+0100","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1581264360006_1133707831","id":"20200206-213442_1734667484","dateCreated":"2020-02-09T17:06:00+0100","dateStarted":"2020-02-09T17:30:41+0100","dateFinished":"2020-02-09T17:30:41+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4139"},{"text":"import java.io.File\nimport java.io.PrintWriter\n\nval writer = new PrintWriter(new File(\"/home/inot/personaleditado.json\"))\nwriter.write(Source.fromFile(\"/home/inot/personal.json\").getLines.mkString.replace(\"\\n\", \"\").replace(\" \", \"\").replace(\"},\", \"},\\n\"))\nwriter.close()","user":"anonymous","dateUpdated":"2020-02-09T17:30:41+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1581265612367_77901070","id":"20200209-172652_1463654297","dateCreated":"2020-02-09T17:26:52+0100","dateStarted":"2020-02-09T17:30:41+0100","dateFinished":"2020-02-09T17:30:42+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4140"},{"text":"val df = spark.readStream\n    .format(\"kafka\")\n    .option(\"kafka.bootstrap.servers\",\"localhost:9092\")\n    .option(\"subscribe\",\"projectBigDataProcessing\")\n    .option(\"startingOffsets\",\"earliest\")\n    .load()\n\nval res = df.selectExpr(\"CAST(value AS STRING)\")\nval schema = new StructType()\n    .add(\"id\",IntegerType)\n    .add(\"first_name\",StringType)\n    .add(\"last_name\",StringType)\n    .add(\"email\",StringType)\n    .add(\"gender\",StringType)\n    .add(\"ip_address\",StringType)\n\nval personal = res.select(from_json(col(\"value\"),schema).as(\"data\"))\n    .select(\"data.*\").where(\"first_name != 'Noell'\")\n\npersonal.writeStream\n    .format(\"console\")\n    .outputMode(\"append\")\n    .start()\n    .awaitTermination()","user":"anonymous","dateUpdated":"2020-02-09T17:30:42+0100","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1581264360006_-1395177029","id":"20200206-214857_1791967274","dateCreated":"2020-02-09T17:06:00+0100","dateStarted":"2020-02-09T17:30:42+0100","dateFinished":"2020-02-09T17:31:00+0100","status":"ERROR","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4141"}],"name":"iqwuegfiue","id":"2EYZYNRG6","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}